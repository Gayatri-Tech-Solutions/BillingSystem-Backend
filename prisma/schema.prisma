// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
 id             Int       @id @default(autoincrement()) @unique
 uuid           String    @unique @default(uuid())
 name           String
 email          String    @unique
 verified       Boolean   @default(false)
 password       String
 createdAt      DateTime @default(now())
 updatedAt      DateTime @updatedAt
}

model Customers {
  id             Int       @id @default(autoincrement()) @unique
  uuid           String    @default(uuid()) @unique
  name           String
  address        Address[]
  gst            String @unique
  phone          String?
  email          String?
  invoice        Invoice[]
  amount         Int   @default(0) 
  ledger         Ledger[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Address {
  id             Int       @id @default(autoincrement()) @unique
  uuid           String    @default(uuid()) @unique 
  customer       Customers @relation(fields: [customerId], references: [id])
  customerId     Int
  houseno        String?
  locality       String?
  city           String
  state          String
  pin            Int?
  country        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Invoice {
  id             Int @default(autoincrement()) @unique
  gst            String
  item           Json
  customerData   Json
  customer       Customers @relation(fields: [customerId] , references: [id])
  customerId     Int
  billNo         String
  status         Status
  amount         Int
  tax            Int
  totalAmount    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  }

  model Ledger {
    id           Int @id @default(autoincrement()) @unique
    customer     Customers @relation(fields: [customerId] , references: [uuid])
    customerId   String
    prevAmount   Int
    type         Action
    newAmount    Int
    total        Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
  }


enum Status {
  Pending
  Cleared
  Cancelled
}

enum Action {
  Credit
  Debit
  Cancelled
}